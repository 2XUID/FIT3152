neuralnet.confmat
neuralnet.WAUS.accuracy = (sum(diag(neuralnet.confmat))/
sum(neuralnet.confmat))
neuralnet.WAUS.accuracy
plot(neuralnet.WAUS)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test)
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(t(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict$WarmerTomorrow)
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict)
$WarmerTomorrow
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(t(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow, predicted=neuralnet.WAUS.predict)
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow, predicted=neuralnet.WAUS.predict$WarmerTomorrow)
neuralnet.confmat
neuralnet.WAUS.accuracy = (sum(diag(neuralnet.confmat))/
sum(neuralnet.confmat))
neuralnet.WAUS.accuracy
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow, predicted=neuralnet.WAUS.predict$WarmerTomorrow)
neuralnet.confmat
View(neuralnet.WAUS.predict)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(t(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(as.array(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
#library
library(dplyr)
#decision tree
library (tree)
#naive bayes
library(e1071)
#bagging
library (adabag)
#boosting
library (rpart)
#random forest
library(randomForest)
#ROC
library(ROCR)
#gradient boosting
library(caret)
#ANN
library(neuralnet)
#create data set
setwd("~/Desktop/FIT3152/assignment 2/")
rm(list = ls())
WAUS <- read.csv("WarmerTomorrow2022.csv")
L <- as.data.frame(c(1:49))
set.seed(26424436) # Your Student ID is the random seed
L <- L[sample(nrow(L), 10, replace = FALSE),] # sample 10 locations
WAUS <- WAUS[(WAUS$Location %in% L),]
WAUS <- WAUS[sample(nrow(WAUS), 2000, replace = FALSE),] # sample 2000 rows
WAUS
options(digits=4)
#check structure
str(WAUS)
#check duplicate --> 0 duplicate
duplicate <- duplicated (WAUS)
sum(duplicate) #0
#check WarmerTomorrow NA
sum(is.na(WAUS$WarmerTomorrow)) #12 NA found
#remove rows with NA
WAUS1 <- filter (WAUS, !is.na(WAUS$WarmerTomorrow))
WAUS1
#proportion of warmer
warmer<-sum(WAUS1$WarmerTomorrow==1)/nrow(WAUS1)
warmer #0.5372
#proportion of cooler
cooler <-sum(WAUS1$WarmerTomorrow==0)/nrow(WAUS1)
cooler #0.4628
tab<-matrix(c(warmer,cooler),ncol=2)
colnames(tab)<-c("Warmer","Cooler")
tab<-as.table(tab)
tab
#remove Day, Month, Year, Location
WAUS2<- WAUS1[5:24]
#only focus on real-valued predictors
WAUS3<-WAUS2[,-c(6,8,9,20)]
#summary real-valued predictors
summary(WAUS3)
#sd of real-valued predictors
summarySD<-WAUS3%>%
summarise_if(is.numeric,sd,na.rm=TRUE)
summarySD
#categorical predictors
#WindGustDir
unique(WAUS2$WindGustDir)
sum(is.na(WAUS2$WindGustDir)) #112NA
#WindDir9am
unique(WAUS2$WindDir9am)
sum(is.na(WAUS2$WindDir9am)) #148NA
#WindDir3pm
unique(WAUS2$WindDir3pm)
sum(is.na(WAUS2$WindDir3pm)) #88NA
#remove Evaporation, Sunshine, Cloud9am and Cloud3pm
WAUS4 <-WAUS2[,-c(4,5,16,17)]
data<-na.omit(WAUS4)
sum(is.na(data)) #0 NA
#convert string to factor
data$WindGustDir <- as.factor(data$WindGustDir)
data$WindDir9am <-as.factor(data$WindDir9am)
data$WindDir3pm <-as.factor(data$WindDir3pm)
data$WarmerTomorrow <-as.factor(data$WarmerTomorrow)
#training & test set
set.seed(26424436) #Student ID as random seed
train.row = sample(1:nrow(data), 0.7*nrow(data))
data.train = data[train.row,]
data.test = data[-train.row,]
data.test$WarmerTomorrow
#decision tree
data.tree <-tree(WarmerTomorrow~.,data=data.train)
plot(data.tree)
text(data.tree, pretty = 0)
#test accuracy
data.treepredict <- predict(data.tree, data.test, type = "class")
table(actual = data.test$WarmerTomorrow, predicted = data.treepredict)
#naive bayes
data.bayes <- naiveBayes(WarmerTomorrow~.,data=data.train)
#test accuracy
data.bayespredict <- predict(data.bayes, data.test)
table(actual = data.test$WarmerTomorrow, predicted = data.bayespredict)
#bagging
data.bag<-bagging(WarmerTomorrow~.,data=data.train)
#test accuracy
data.bagpredict<-predict.bagging(data.bag,newdata=data.test)
table(actual=data.test$WarmerTomorrow,predicted=data.bagpredict$class)
#boosting
data.boost<-boosting(WarmerTomorrow~.,data=data.train)
#test accuracy
data.boostpredict<-predict.boosting(data.boost,newdata=data.test)
table(actual=data.test$WarmerTomorrow,predicted=data.boostpredict$class)
#random forest
data.rf <- randomForest(WarmerTomorrow~.,data=data.train)
#test accuracy
data.rfpredict <- predict(data.rf, data.test)
table(actual = data.test$WarmerTomorrow, predicted = data.rfpredict)
#ROC
#decision tree
data.pred.tree <- predict(data.tree, data.test, type = "vector")
data.pred.tree
treepredict<-prediction(data.pred.tree[,2],data.test$WarmerTomorrow)
treeperformance<-performance(treepredict,"tpr","fpr")
plot(treeperformance,col=3,main="ROC curves of different classifiers")
abline(0,1)
#ROC
#decision tree
data.pred.tree <- predict(data.tree, data.test, type = "vector")
data.pred.tree
treepredict<-prediction(data.pred.tree[,2],data.test$WarmerTomorrow)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
ANN.WAUS = WAUS
ANN.WAUS = na.omit(ANN.WAUS)
ANN.m =  as.data.frame(model.matrix(~WindGustDir+WindDir9am+WindDir3pm, data=ANN.WAUS))
#factor
ANN.WAUS = cbind(ANN.WAUS,ANN.m)
ANN.WAUS$WarmerTomorrow = factor(ANN.WAUS$WarmerTomorrow)
ANN.WAUS
ANN.WAUS = ANN.WAUS[,-c(1:4,7,10:17,19:23)]
ANN.WAUS$`(Intercept)`<-NULL
ANN.WAUS
set.seed(30874157)
train.row = sample(1:nrow(ANN.WAUS), 0.7*nrow(ANN.WAUS))
ANN.WAUS.train = ANN.WAUS[train.row,]
ANN.WAUS.test = ANN.WAUS[-train.row,]
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict$WarmerTomorrow)
neuralnet.confmat
neuralnet.WAUS.accuracy = (sum(diag(neuralnet.confmat))/
sum(neuralnet.confmat))
neuralnet.WAUS.accuracy
plot(neuralnet.WAUS)
ANN.WAUS = WAUS
ANN.WAUS = na.omit(ANN.WAUS)
ANN.m =  as.data.frame(model.matrix(~WindGustDir+WindDir9am+WindDir3pm, data=ANN.WAUS))
#factor
ANN.WAUS = cbind(ANN.WAUS,ANN.m)
ANN.WAUS$WarmerTomorrow = factor(ANN.WAUS$WarmerTomorrow)
ANN.WAUS
ANN.WAUS = ANN.WAUS[,-c(1:4,7,10:17,19:23)]
ANN.WAUS$`(Intercept)`<-NULL
ANN.WAUS
set.seed(30874157)
train.row = sample(1:nrow(ANN.WAUS), 0.7*nrow(ANN.WAUS))
ANN.WAUS.train = ANN.WAUS[train.row,]
ANN.WAUS.test = ANN.WAUS[-train.row,]
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict$WarmerTomorrow)
neuralnet.confmat
neuralnet.WAUS.accuracy = (sum(diag(neuralnet.confmat))/
sum(neuralnet.confmat))
neuralnet.WAUS.accuracy
plot(neuralnet.WAUS)
ANN.WAUS = WAUS
ANN.WAUS = na.omit(ANN.WAUS)
ANN.m =  as.data.frame(model.matrix(~WindGustDir+WindDir9am+WindDir3pm, data=ANN.WAUS))
#factor
ANN.WAUS = cbind(ANN.WAUS,ANN.m)
ANN.WAUS$WarmerTomorrow = factor(ANN.WAUS$WarmerTomorrow)
ANN.WAUS
ANN.WAUS = ANN.WAUS[,-c(1:4,7,10:17,19:23)]
ANN.WAUS$`(Intercept)`<-NULL
ANN.WAUS
set.seed(30874157)
train.row = sample(1:nrow(ANN.WAUS), 0.7*nrow(ANN.WAUS))
ANN.WAUS.train = ANN.WAUS[train.row,]
ANN.WAUS.test = ANN.WAUS[-train.row,]
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
ANN.WAUS = WAUS
ANN.WAUS = na.omit(ANN.WAUS)
ANN.m =  as.data.frame(model.matrix(~WindGustDir+WindDir9am+WindDir3pm, data=ANN.WAUS))
#factor
ANN.WAUS = cbind(ANN.WAUS,ANN.m)
ANN.WAUS$WarmerTomorrow = factor(ANN.WAUS$WarmerTomorrow)
ANN.WAUS
ANN.WAUS = ANN.WAUS[,-c(1:4,7,10:17,19:23)]
ANN.WAUS$`(Intercept)`<-NULL
ANN.WAUS
set.seed(30874157)
train.row = sample(1:nrow(ANN.WAUS), 0.7*nrow(ANN.WAUS))
ANN.WAUS.train = ANN.WAUS[train.row,]
ANN.WAUS.test = ANN.WAUS[-train.row,]
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict$WarmerTomorrow)
neuralnet.confmat
neuralnet.WAUS.accuracy = (sum(diag(neuralnet.confmat))/
sum(neuralnet.confmat))
library(neuralnet)
setwd("C:/Users/aud/My Drive/Documents/Assignment/2-SEM_1/FIT3152/A2 (20%)")
rm(list = ls())
WAUS <- read.csv("WarmerTomorrow2022.csv")
L <- as.data.frame(c(1:49))
set.seed(30874157) # Your Student ID is the random seed
L <- L[sample(nrow(L), 10, replace = FALSE),] # sample 10 locations
WAUS <- WAUS[(WAUS$Location %in% L),]
WAUS <- WAUS[sample(nrow(WAUS), 2000, replace = FALSE),] # sample 2000 rows
#the WAUS without NA value object
WAUS.WithoutNA = na.omit(WAUS)
#setting 4 decimals
options(digits=4)
#----------
#Question 1
#----------
#delete Warmer Tomorrow NA value
bad.WAUS = is.na(WAUS$WarmerTomorrow)
WAUS.WTWithoutNA=WAUS[!bad.WAUS,]
#proportion warmer vs not warmer
count.WT = WAUS.WTWithoutNA %>% count(WarmerTomorrow)
proportion = count.WT$n[2]/(count.WT$n[1]+count.WT$n[2])
proportion
remove(WAUS.WTWithoutNA)
#present the mean of every elements relate to warmer
WAUS.WithoutNA %>% summarise_if(is.numeric, mean)
#present the std
WAUS.WithoutNA %>% summarise_if(is.numeric, sd)
#Calculate the correlation of them to find any element should remove
A2_Correlation <- na.omit(subset(WAUS, select = -c(WindGustDir,
WindDir9am,
WindDir3pm,
WarmerTomorrow)))
A2_Correlation = cor(A2_Correlation)
corrplot(A2_Correlation,
method = 'square',
order = 'alphabet',
type = 'lower',
tl.col= "black",
tl.srt= 45,
diag = FALSE)
#----------
#Question 2
#----------
#Remove Day, Year, Month, Location
#Remove NA value
WAUS.WithoutNA$Day<-NULL
WAUS.WithoutNA$Month<-NULL
WAUS.WithoutNA$Year<-NULL
#factor
unique(WAUS.WithoutNA$WindGustDir)
unique(WAUS.WithoutNA$WindDir9am)
unique(WAUS.WithoutNA$WindDir3pm)
WAUS.WithoutNA$WindGustDir = as.factor(WAUS.WithoutNA$WindGustDir)
WAUS.WithoutNA$WindDir9am = as.factor(WAUS.WithoutNA$WindDir9am)
WAUS.WithoutNA$WindDir3pm = as.factor(WAUS.WithoutNA$WindDir3pm)
WAUS.WithoutNA$WarmerTomorrow = as.factor(WAUS.WithoutNA$WarmerTomorrow)
ANN.WAUS = WAUS
ANN.WAUS = na.omit(ANN.WAUS)
ANN.m =  as.data.frame(model.matrix(~WindGustDir+WindDir9am+WindDir3pm, data=ANN.WAUS))
#factor
ANN.WAUS = cbind(ANN.WAUS,ANN.m)
ANN.WAUS$WarmerTomorrow = factor(ANN.WAUS$WarmerTomorrow)
ANN.WAUS
ANN.WAUS = ANN.WAUS[,-c(1:4,7,10:17,19:23)]
ANN.WAUS$`(Intercept)`<-NULL
ANN.WAUS
set.seed(30874157)
train.row = sample(1:nrow(ANN.WAUS), 0.7*nrow(ANN.WAUS))
ANN.WAUS.train = ANN.WAUS[train.row,]
ANN.WAUS.test = ANN.WAUS[-train.row,]
neuralnet.WAUS = neuralnet(WarmerTomorrow~
MinTemp+MaxTemp+Evaporation+Sunshine+Pressure9am +
WindGustDirENE+WindGustDirESE+WindGustDirN+
WindGustDirNE+WindGustDirNNE+WindGustDirNNW+
WindGustDirNW+WindGustDirS+WindGustDirSE+
WindGustDirSSE+WindGustDirSSW+WindGustDirSW+
WindGustDirW+WindGustDirWNW+WindGustDirWSW+
WindDir9amENE+WindDir9amESE+WindDir9amN+
WindDir9amNE+WindDir9amNNE+WindDir9amNNW+
WindDir9amNW+WindDir9amS+WindDir9amSE+
WindDir9amSSE+WindDir9amSSW+WindDir9amSW+
WindDir9amW+WindDir9amWNW+WindDir9amWSW+
WindDir3pmENE+WindDir3pmESE+WindDir3pmN+
WindDir3pmNE+WindDir3pmNNE+WindDir3pmNNW+
WindDir3pmNW+WindDir3pmS+WindDir3pmSE+
WindDir3pmSSE+WindDir3pmSSW+WindDir3pmSW+
WindDir3pmW+WindDir3pmWNW+WindDir3pmWSW,
ANN.WAUS.train,
hidden = 6,
linear.output = FALSE)
#tidy data
neuralnet.WAUS.predict = neuralnet::compute(neuralnet.WAUS,ANN.WAUS.test[c(1:51)])
neuralnet.WAUS.predict$net.result
neuralnet.WAUS.predict = as.data.frame(as.table(neuralnet.WAUS.predict))
neuralnet.WAUS.predict = round(neuralnet.WAUS.predict$net.result,0)
neuralnet.WAUS.predict = neuralnet.WAUS.predict[!neuralnet.WAUS.predict$Freq==0,]
neuralnet.WAUS.predict$Freq = NULL
colnames(neuralnet.WAUS.predict) = c("Objects", "WarmerTomorrow")
neuralnet.WAUS.predict = neuralnet.WAUS.predict[order(neuralnet.WAUS.predict$Objects),]
# Create confusion matrix and calculate the accuracy
neuralnet.confmat = table(actual=ANN.WAUS.test$WarmerTomorrow,
predicted=neuralnet.WAUS.predict$WarmerTomorrow)
